{"version":3,"file":"static/js/353.f6f6c31a.chunk.js","mappings":"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","sources":["components/Banner.js","components/BannerMobile.js","components/RenderBanner.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './Banner.css';\r\nimport textImage from './image/text.png'; // Ensure the path is correct\r\nimport abdou from './image/abdou.png'; // Superman-like PNG image\r\nimport scrollGif from './image/scroll.gif'; // Import the scroll gif\r\n\r\nfunction Banner() {\r\n  const bannerRef = useRef(null);\r\n  const imageContainerRef = useRef(null);\r\n  const scrollingTextRef = useRef(null);\r\n  const scrollGifRef = useRef(null);\r\n  const [isHidden, setIsHidden] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Preload abdou.png for faster loading\r\n    const img = new Image();\r\n    img.src = abdou;\r\n\r\n    const bannerElement = bannerRef.current;\r\n    const imageContainerElement = imageContainerRef.current;\r\n    const scrollingTextElement = scrollingTextRef.current;\r\n\r\n    const handleScroll = () => {\r\n      const scrollPosition = window.scrollY;\r\n      const windowHeight = window.innerHeight;\r\n\r\n      // Scaling logic for banner\r\n      const scaleFactor = 1 + (scrollPosition / windowHeight) * 0.9;\r\n      const maxScale = 2.2;\r\n      const minScale = 1;\r\n      const bannerScaleValue = Math.min(maxScale, Math.max(minScale, scaleFactor));\r\n\r\n      // Scaling logic for text\r\n      const textScaleFactor = 1 - (scrollPosition / windowHeight) * 0.3;\r\n      const maxTextScale = 1;\r\n      const minTextScale = 0.7;\r\n      const textScaleValue = Math.min(maxTextScale, Math.max(minTextScale, textScaleFactor));\r\n\r\n      if (scrollPosition > windowHeight * 0.5) {\r\n        setIsHidden(true);\r\n      } else {\r\n        setIsHidden(false);\r\n      }\r\n\r\n      bannerElement.style.transform = `scale(${bannerScaleValue})`;\r\n      imageContainerElement.style.transform = `translate(-50%, -50%) scale(${bannerScaleValue})`;\r\n      scrollingTextElement.style.transform = `translateY(-50%) scale(${textScaleValue})`;\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`banner ${isHidden ? 'hidden' : ''}`} ref={bannerRef}>\r\n      {/* Scrolling Text */}\r\n      <div className=\"scrolling-text-container\" ref={scrollingTextRef}>\r\n        <img src={textImage} alt=\"Scrolling Text\" loading=\"lazy\" />\r\n      </div>\r\n\r\n      {/* Fixed Centered Image */}\r\n      <div className=\"static-image-container\" ref={imageContainerRef}>\r\n        <img src={abdou} alt=\"Flying Superman Abdou\" /> {/* Removed lazy loading */}\r\n      </div>\r\n\r\n      {/* Scroll Down Indicator */}\r\n      <div className=\"scroll-down-indicator\" ref={scrollGifRef}>\r\n        <img src={scrollGif} alt=\"Scroll Down\" loading=\"lazy\" />\r\n        <p className=\"scroll-text\">Scroll Down</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport './BannerMobile.css';\r\nimport textImage from './image/text.png'; // Ensure the path is correct\r\nimport abdou from './image/abdou.png'; // Your Superman-like image\r\nimport scrollGif from './image/scroll.gif'; // Import the scroll gif\r\n\r\nfunction BannerMobile() {\r\n  const bannerRef = useRef(null);\r\n  const imageContainerRef = useRef(null);\r\n  const scrollingTextRef = useRef(null);\r\n  const scrollGifRef = useRef(null);\r\n  const [isHidden, setIsHidden] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Preload abdou.png for faster loading\r\n    const img = new Image();\r\n    img.src = abdou;\r\n    img.onload = () => {\r\n      console.log('Abdou image preloaded');\r\n    };\r\n\r\n    const bannerElement = bannerRef.current;\r\n    const imageContainerElement = imageContainerRef.current;\r\n    const scrollingTextElement = scrollingTextRef.current;\r\n    const scrollGifElement = scrollGifRef.current;\r\n\r\n    const handleScroll = () => {\r\n      const scrollPosition = window.scrollY;\r\n      const windowHeight = window.innerHeight;\r\n\r\n      // Scaling logic for banner\r\n      const scaleFactor = 1.5 + (scrollPosition / windowHeight) * 1.2;\r\n      const maxScale = 2.2;\r\n      const minScale = 1.5;\r\n      const bannerScaleValue = Math.min(maxScale, Math.max(minScale, scaleFactor));\r\n\r\n      // Scaling logic for text\r\n      const textScaleFactor = 1 - (scrollPosition / windowHeight) * 0.3;\r\n      const maxTextScale = 1;\r\n      const minTextScale = 0.7;\r\n      const textScaleValue = Math.min(maxTextScale, Math.max(minTextScale, textScaleFactor));\r\n\r\n      if (scrollPosition > windowHeight * 0.5) {\r\n        setIsHidden(true);\r\n      } else {\r\n        setIsHidden(false);\r\n      }\r\n\r\n      bannerElement.style.transform = `scale(${bannerScaleValue})`;\r\n      imageContainerElement.style.transform = `translate(-50%, -50%) scale(${bannerScaleValue})`;\r\n      scrollingTextElement.style.transform = `translateY(-50%) scale(${textScaleValue})`;\r\n\r\n      // Hide scroll gif and text on scroll\r\n      scrollGifElement.style.opacity = scrollPosition > 50 ? '0' : '1';\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`banner-mobile ${isHidden ? 'hidden' : ''}`} ref={bannerRef}>\r\n      {/* Scrolling Text */}\r\n      <div className=\"scrolling-text-container\" ref={scrollingTextRef}>\r\n        <img src={textImage} alt=\"Scrolling Text\" loading=\"lazy\" />\r\n      </div>\r\n\r\n      {/* Fixed Centered Image */}\r\n      <div className=\"static-image-container\" ref={imageContainerRef}>\r\n        <img src={abdou} alt=\"Flying Superman Abdou\" loading=\"lazy\" />\r\n      </div>\r\n\r\n      {/* Scroll Down Indicator */}\r\n      <div className=\"scroll-down-indicator\" ref={scrollGifRef}>\r\n        <img src={scrollGif} alt=\"Scroll Down\" loading=\"lazy\" />\r\n        <p className=\"scroll-text\">Scroll Down</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BannerMobile;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Banner from './Banner'; // Desktop and tablet version\r\nimport BannerMobile from './BannerMobile'; // Mobile version\r\n\r\nfunction RenderBanner() {\r\n  const [isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Function to check screen size and set the mobile state\r\n    const checkScreenSize = () => {\r\n      const screenWidth = window.innerWidth;\r\n      setIsMobile(screenWidth <= 767); // Mobile screen width is 767px or less\r\n    };\r\n\r\n    // Check screen size on component mount\r\n    checkScreenSize();\r\n\r\n    // Add event listener for window resize\r\n    window.addEventListener('resize', checkScreenSize);\r\n\r\n    // Clean up event listener on component unmount\r\n    return () => {\r\n      window.removeEventListener('resize', checkScreenSize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {isMobile ? <BannerMobile /> : <Banner />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RenderBanner;\r\n"],"names":["bannerRef","useRef","imageContainerRef","scrollingTextRef","scrollGifRef","isHidden","setIsHidden","useState","useEffect","Image","src","abdou","bannerElement","current","imageContainerElement","scrollingTextElement","handleScroll","scrollPosition","window","scrollY","windowHeight","innerHeight","scaleFactor","bannerScaleValue","Math","min","max","textScaleFactor","textScaleValue","style","transform","addEventListener","removeEventListener","_jsxs","className","ref","children","_jsx","textImage","alt","loading","scrollGif","img","onload","console","log","scrollGifElement","opacity","isMobile","setIsMobile","checkScreenSize","screenWidth","innerWidth","BannerMobile","Banner"],"sourceRoot":""}